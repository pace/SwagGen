interface {{ type|upperCamelCase }}Service {

    {% if description %}
    /** {{ description }} **/
    {% endif %}
    @{{ method|uppercase }}("{% for part in path | split:"/" %}{{ part }}{% ifnot forloop.first %}{% ifnot forloop.last %}/{% endif %}{% endif %}{% endfor %}")
    fun {{ type|lowerCamelCase }}(
        {% for param in nonBodyParams %}
        {% if param.value in path %}@Path{% else %}@Query{% endif %}("{{ param.value }}") {{ param.name }}: {% if param.optionalType == "Date? = null" %}String? = null {% else %}{{ param.optionalType }}{% endif %}{% ifnot forloop.last %},{% endif %}
        {% endfor %}
    ): Call<{% if successResponse.schema.properties.first.type %}{{ successResponse.schema.properties.first.type }}{% elif successResponse.schema.type and successResponse.schema.type != "File" %}List<{{successResponse.schema.type}}>{% else %}Void{% endif %}>
}

private val service: {{ type|upperCamelCase }}Service by lazy {
    Retrofit.Builder()
        .client(OkHttpClient.Builder().addInterceptor(InterceptorUtils.getInterceptor({% for item in raw.responses.200.content %}"{{ item }}"{% empty %}null{% endfor %}, {% for item in raw.responses.200.content %}"{{ item }}"{% empty %}null{% endfor %})).build())
        .baseUrl(API.baseUrl)
            .addConverterFactory(
                JsonApiConverterFactory.create(
                    Moshi.Builder().add(
                        ResourceAdapterFactory.builder()
                            {% for item in responses where item.statusCode == 200 %}
                            {% for innerItem in item.schema.raw.properties.included.items.oneOf %}
                            {% for ref in innerItem.$ref|split:"/" %}
                            {% if forloop.last %}
                            .add({{ ref }}::class.java)
                            {% endif %}
                            {% endfor %}
                            {% endfor %}
                            {% endfor %}
                            .build()
                    )
                        .add(KotlinJsonAdapterFactory())
                        .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                        .build()
                )
            )
        .build()
        .create({{ type|upperCamelCase }}Service::class.java)
}

fun API.{{ tag|upperCamelCase }}API.{{ type|lowerCamelCase }}({% for param in nonBodyParams %}{{ param.name }}: {{ param.optionalType }}{% ifnot forloop.last %}, {% endif %}{% endfor %}): Call<{% if successResponse.schema.properties.first.type %}{{ successResponse.schema.properties.first.type }}{% elif successResponse.schema.type and successResponse.schema.type != "File" %}List<{{successResponse.schema.type}}>{% else %}Void{% endif %}> {
    return service.{{ type|lowerCamelCase }}({% for param in nonBodyParams %}{% if param.optionalType == "Date? = null" %}{{ param.name }}?.toIso8601()?.dropLast(9)?.let { it +'Z'} {% else %}{{param.name}}{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %})
}


