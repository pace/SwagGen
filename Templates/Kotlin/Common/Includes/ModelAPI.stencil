object {{ type }}API {

    interface {{ type }}Service {
        {% if summary %}
        /* {{ summary }} */
        {% endif %}
        {% if description %}
        /* {{ description }} */
        {% endif %}
        @{{ method|uppercase }}("{% for part in path | split:"/" %}{{ part }}{% ifnot forloop.first %}{% ifnot forloop.last %}/{% endif %}{% endif %}{% endfor %}")
        fun {{ type|lowerCamelCase }}(
            {% for param in nonBodyParams %}
            {% if param.description %}
            /* {{ param.description }} */
            {% endif %}
            {% if param.value in path %}@Path{% else %}@Query{% endif %}("{{ param.value }}") {{ param.name }}: {% if param.optionalType == "Date? = null" %}String? = null{% else %}{{ param.optionalType }}{% endif %}{% if not forloop.last or body %},{% endif %}
            {% endfor %}
            {% if body %}
            {% if body.description %}
            /* {{ body.description }} */
            {% endif %}
            @retrofit2.http.Body {{ body.name}}: {{body.optionalType}}
            {% endif %}
        ): Call<{% if successResponse.schema.properties.first.type %}{{ successResponse.schema.properties.first.type }}{% elif successResponse.schema.type and successResponse.schema.type != "File" %}{{ successResponse.schema.type }}{% else %}Void{% endif %}>
    }
    {% for enum in requestEnums where not enum.isGlobal %}

        {% filter indent:4 %}{% include "Common/Includes/Enum.stencil" enum %}{% endfilter %}
    {% endfor %}
    {% for schema in requestSchemas %}

        {% filter indent:4 %}{% include "Common/Includes/Model.stencil" schema %}{% endfilter %}
    {% endfor %}

    private val service: {{ type|upperCamelCase }}Service by lazy {
        Retrofit.Builder()
            .client(OkHttpClient.Builder().addInterceptor(InterceptorUtils.getInterceptor("application/json", "application/json")).build())
            .baseUrl({{ options.modelProtocol }}.baseUrl)
            .addConverterFactory(EnumConverterFactory())
            .addConverterFactory(
                JsonApiConverterFactory.create(
                    Moshi.Builder()
                        .add(ResourceAdapterFactory.builder()
                            {% for item in responses where item.statusCode == 200 %}	
                            {% for innerItem in item.schema.raw.properties.included.items.oneOf %}	
                            {% for ref in innerItem.$ref|split:"/" %}
                            {% if forloop.last %}
                            .add({{ ref }}::class.java)
                            {% endif %}
                            {% endfor %}
                            {% endfor %}
                            {% endfor %}
                            .build()
                        )
                        .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                        .add(KotlinJsonAdapterFactory())
                        .build()
                )
            )
            .build()
            .create({{ type|upperCamelCase }}Service::class.java)
    }

    fun {{ options.modelProtocol }}.{{ tag|upperCamelCase }}API.{{ type|lowerCamelCase }}({% for param in nonBodyParams %}{{ param.name }}: {{ param.optionalType }}{% if not forloop.last or body %}, {% endif %}{% endfor %}{% if body %}{{ body.name}}: {{ body.optionalType }}{% endif %}) =
        service.{{ type|lowerCamelCase }}({% for param in nonBodyParams %}{% if param.optionalType == "Date? = null" %}{{ param.name }}?.toIso8601()?.dropLast(9)?.let { it +'Z'} {% else %}{{ param.name }}{% endif %}{% if not forloop.last or body %}, {% endif %}{% endfor %}{% if body %}{{ body.name}}{% endif %})
}
