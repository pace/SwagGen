{% if description %}
/** {{ description }} */
{% endif %}
{% if enum %}
{% include "Common/Includes/Enum.stencil" enum %}
{% elif aliasType %}
public typealias {{ type }} = {{ aliasType }}
{% elif additionalPropertiesType and allProperties.count == 0 %}
public typealias {{ type }} = [String: {{ additionalPropertiesType }}]
{% elif discriminatorType %}
public enum {{ type }}: Codable, Equatable {
    {% for subType in discriminatorType.subTypes %}
    case {{ subType.name}}({{ subType.type }})
    {% endfor %}
    {% if options.enumUndecodableCase %}
    case undecodable
    {% endif %}

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("{{ discriminatorType.discriminatorProperty }}")
        switch discriminator {
        {% for name, subType in discriminatorType.mapping %}
        case "{{ name }}":
            self = .{{ subType.name}}(try {{ subType.type }}(from: decoder))
        {% endfor %}
        default:
        {% if options.enumUndecodableCase %}
            self = .undecodable
        {% else %}
            throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
        {% endif %}
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {% for subType in discriminatorType.subTypes %}
        case .{{ subType.name}}(let content):
            try container.encode(content)
        {% endfor %}
        {% if options.enumUndecodableCase %}
        case .undecodable:
            try container.encode("undecodable")
        {% endif %}
        }
    }
}
{% else %}
public {{ options.modelType }} {{ type }}: {% if parent %}{{ parent.type }}{% else %}{% if options.modelProtocol %}{{ options.modelProtocol }}{% else %}Codable, Equatable{% endif %}{% endif %} {
    {% for enum in enums %}
    {% if not enum.isGlobal %}

    {% filter indent:4 %}{% include "Common/Includes/Enum.stencil" enum %}{% endfilter %}
    {% endif %}
    {% endfor %}
    {% for property in properties %}
    {% if property.isPoly %}
    public enum {{ property.polyTypeString }}: Equatable, Codable {
        {% for polyType in property.polyTypes %}
        case {{ polyType.name }}({{ polyType.type }})
        {% endfor %}
        {% for polyType in property.polyTypes %}

        public var {{ polyType.name }}: {{ polyType.type }}? {
            guard case let .{{ polyType.name }}({{ polyType.name }}) = self else { return nil }
            return {{ polyType.name }}
        }

        public init(_ {{ polyType.name }}: {{ polyType.type }}) {
            self = .{{ polyType.name }}({{ polyType.name }})
        }
        {% endfor %}

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()

            switch self {
            {% for polyType in property.polyTypes %}
            case .{{ polyType.name }}(let {{ polyType.name }}):
                try container.encode({{ polyType.name }})
            {% endfor %}
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()

            let attempts = [
                {% for polyType in property.polyTypes %}
                try decode({{ polyType.type }}.self, from: container).map { {{ property.polyTypeString }}.{{ polyType.name }}($0) }{% if not forloop.last %},{% endif %}
                {% endfor %}
            ]

            let maybeVal: {{ property.polyTypeString }}? = attempts
                .lazy
                .compactMap { $0.value }
                .first

            guard let val = maybeVal else {
                let individualFailures = attempts.map { $0.error }.compactMap { $0 }
                throw PolyDecodeNoTypesMatchedError(codingPath: decoder.codingPath,
                                                    individualTypeFailures: individualFailures)
            }

            self = val
        }
    }
    {% endif %}
    {% endfor %}
    {% for property in properties %}

    {% if property.description %}
    /** {{ property.description }} */
    {% endif %}
    public {% if options.mutableModels %}var{% else %}let{% endif %} {{ property.name }}: {{ property.optionalType }}
    {% endfor %}
    {% if additionalPropertiesType %}

    public {% if options.mutableModels %}var{% else %}let{% endif %} additionalProperties: [String: {{ additionalPropertiesType }}] = [:]
    {% endif %}
    {% for schema in schemas %}

    {% filter indent:4 %}{% include "Common/Includes/Model.stencil" schema %}{% endfilter %}
    {% endfor %}

    public {% if parent %}{% if properties.count == 0 %}override {% endif %}{% endif %}init({% for property in properties %}{{ property.name }}: {{ property.optionalType }}{% ifnot property.required %} = nil{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %}) {
        {% for property in properties %}
        self.{{ property.name }} = {{ property.name }}
        {% endfor %}
        {% if parent %}
        super.init({% for property in parent.properties %}{{ property.name }}: {{ property.name }}{% ifnot forloop.last %}, {% endif %}{% endfor %})
        {% endif %}
    }

    public {% if options.modelType == 'class' %}required {% endif %}init(from decoder: Decoder) throws {
        {% if properties.count > 0 %}
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        {% for property in properties %}
        {% if property.isPoly %}
        guard let {{ property.name }} = try container.toDictionary()["{{ property.name }}"] as? [[String: Any]] else { return }
        let decoder = JSONDecoder()

        {% for polyType in property.polyTypes %}
        let {{ property.name }}{{ polyType.type }}s = {{ property.name }}.filter { $0["type"] as? String == {{ polyType.type }}.{{ options.modelPrefix }}Type.allCases.first?.rawValue }
        {% endfor %}

        {% for polyType in property.polyTypes %}
        let decoded{{ polyType.type }}s: [{{ polyType.type }}] = try decoder.decodeJSONObject({{ property.name }}{{ polyType.type }}s)
        {% endfor %}

        self.{{ property.name }} =
            {% for polyType in property.polyTypes %}{% if forloop.first %}decoded{{ polyType.type }}s.map({{ property.polyTypeString }}.init){% else %}
            + decoded{{ polyType.type }}s.map({{ property.polyTypeString }}.init)
            {% endif %}{% endfor %}

        {% else %}
        {% if property.type == 'Decimal' %}
        {{ property.name }} = try container.decode{% if property.isArray and not property.isAnyType %}Array{% endif %}{% if property.isAnyType %}Any{% endif %}{% if property.optional %}LosslessDecimal{% endif %}("{{ property.value }}")
        {% else %}
        {{ property.name }} = try container.decode{% if property.isArray and not property.isAnyType %}Array{% endif %}{% if property.isAnyType %}Any{% endif %}{% if property.optional %}IfPresent{% endif %}("{{ property.value }}")
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}
        {% if additionalPropertiesType %}

        let additionalPropertiesContainer = try decoder.container(keyedBy: StringCodingKey.self)
        var additionalProperties = try additionalPropertiesContainer.toDictionary()
        {% for property in properties %}
        additionalProperties.removeValue(forKey: "{{ property.value }}")
        {% endfor %}
        {% if additionalPropertiesType != "Any" %}
        var decodedAdditionalProperties: [String: {{ additionalPropertiesType }}] = [:]
        for key in additionalProperties.keys {
            decodedAdditionalProperties[key] = try additionalPropertiesContainer.decode(StringCodingKey(string: key))
        }
        self.additionalProperties = decodedAdditionalProperties
        {% else %}
        self.additionalProperties = additionalProperties
        {% endif %}
        {% endif %}
        {% if parent %}
        try super.init(from: decoder)
        {% endif %}
    }

    public {% if parent %}override {% endif %}func encode(to encoder: Encoder) throws {
        {% if properties.count > 0 %}
        var container = encoder.container(keyedBy: StringCodingKey.self)

        {% for property in properties %}
        try container.encode{% if property.isAnyType %}Any{% endif %}{% if property.optional %}IfPresent{% endif %}({{ property.name }}, forKey: "{{ property.value }}")
        {% endfor %}
        {% endif %}
        {% if additionalPropertiesType %}

        var additionalPropertiesContainer = encoder.container(keyedBy: StringCodingKey.self)
        for (key, value) in additionalProperties {
            try additionalPropertiesContainer.encode{% if additionalPropertiesType == "Any" %}Any{% endif %}(value, forKey: StringCodingKey(string: key))
        }
        {% endif %}
        {% if parent %}
        try super.encode(to: encoder)
        {% endif %}
    }
    {% if additionalPropertiesType %}

    public subscript(key: String) -> {{ additionalPropertiesType }}? {
        get {
            return additionalProperties[key]
        }
        set {
            additionalProperties[key] = newValue
        }
    }
    {% endif %}

    {% if options.modelType == "class" %}
    {% if parent %}override {% endif %}public func isEqual(to object: Any?) -> Bool {
      {% if properties.count > 0 or additionalPropertiesType %}
      guard let object = object as? {{ type }} else { return false }
      {% else %}
      guard object is {{ type }} else { return false }
      {% endif %}
      {% for property in properties %}
      {% if property.type == "[String: Any]" %}
      guard NSDictionary(dictionary: self.{{ property.name}} {% if property.optional %}?? [:]{% endif %}).isEqual(to: object.{{ property.name }}{% if property.optional %} ?? [:]{% endif %}) else { return false }
      {% else %}
      guard self.{{ property.name }} == object.{{ property.name }} else { return false }
      {% endif %}
      {% endfor %}
      {% if additionalPropertiesType %}
      guard NSDictionary(dictionary: self.additionalProperties).isEqual(to: object.additionalProperties) else { return false }
      {% endif %}
      {% if parent %}
      return super.isEqual(to: object)
      {% else %}
      return true
      {% endif %}
    }
    {% if not parent %}

    public static func == (lhs: {{ type }}, rhs: {{ type }}) -> Bool {
        return lhs.isEqual(to: rhs)
    }
    {% endif %}
    {% endif %}
}
{% endif %}
